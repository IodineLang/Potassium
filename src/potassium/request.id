use potassium.auth;

class Parameters {
    func Parameters (self, paramDict) {
        self.parameters = paramDict;
    }

    func getParam(self, key) {
        if (self.parameters.contains(key)) {
            return self.parameters[key];
        }
        else {
            return null;
        }
    }
}

class URLEncodedParameters : Parameters {
    func URLEncodedParameters (self, queryString) {
        super(null);
        self.parameters = self.parse(queryString);
    }

    func parse (self, queryString) {
        if (queryString == null) {
            return {};
        }
        pairs = queryString.split("&");
        if (pairs[0] == "") {
            return {};
        }
        query_dict = {};
        foreach (pair in pairs) {
            pair_items = pair.split("=");
            query_dict[pair_items[0]] = self.unescapeQueryItem (pair_items[1]);
        }
        return query_dict;
    }

    func unescapeQueryItem (self, item) {
        item = item.replace ("+", " ");
        i = 0;
        accum = "";
        while (i < len (item)) {
            if (item [i] == "%") {
                ch = item [i + 1] + item [i + 2];
                accum += chr (Int (ch, 16));
                i += 3;
            } else {
                accum += item [i];
                i += 1;
            }
        }
        return accum;
    }

}

class Request {
    func Request (self, getParameters, postData, cookies) {
        self.parameters = getParameters;
        self.postData = postData;
        self.cookies = cookies;
        self.sessionState = self.sessionValid ();
    }

    func sessionValid (self) {
        if (self.cookies.contains ("id")) {
            authHelper = auth.Auth ();
            res = authHelper.verifyToken (self.cookies ["id"]);
            self.user = {};
            self.user ["username"] = res [1];
            return res [0];
        }
        return false;
    }

}

class RequestType {
    # Name = string (caps) e.g. GET
    # Parameters = bool, indicating whether
    #              stdin should be read.
    func RequestType (self, name, postParams, queryParams) {
        self.name = name;
        self.postParams = postParams;
        self.queryParams = queryParams;
    }
}

class GetRequest : RequestType {
    func GetRequest (self) {
        super("GET", false, true);
    }
}

class PostRequest : RequestType {
    func PostRequest (self) {
        super("POST", true, true);
    }
}

class AnyRequest : RequestType {
    func AnyRequest (self) {
        super("*", true, true);
    }
}
