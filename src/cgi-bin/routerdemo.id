#!/usr/bin/mono /usr/lib/iodine/iodine.exe  
use potassium.response;
use potassium.request;
use potassium.views;
use potassium.router;
use potassium.db;

use json;
use os;

func main () {
    db.DatabaseSingleton.initLazy ("Server=localhost;Database=test;Uid=root;" +
                                   "Pwd=secret;");   
    urlList = List ();
    urlList.add(router.URLItem("/", views.View(request.GetRequest(), okView)));
    urlList.add(router.URLItem("/auth", views.View(request.GetRequest(), postView)));
    urlList.add(router.URLItem("/bye", views.View(request.GetRequest(), 
                                                  byeView)));
    urlList.add(router.URLItem("/404", views.View(request.AnyRequest(), 
                                                     notFoundView)));
    urlSpec = router.URLSpec(urlList, "/404");
    xRouter = router.Router(urlSpec, os.getEnv("PATH_INFO"));
    
    xRouter.run();
}

func notFoundView (requestData) {
    resp = HashMap ();
    resp["response"] = "Unknown request.";
    return response.JSONResponse(json.dump(resp), 404);
}

func okView(requestData) {
    resp = HashMap ();
    resp ["response"] = requestData.sessionValid ();
    return response.JSONResponse(json.dump(resp), 200);
}

func byeView(requestData) {
    resp = HashMap ();
    resp["response"] = "Bye!";
    return response.JSONResponse(json.dump(resp), 200);
}

func postView(requestData) {   
    resp = response.HTMLResponse("<h1>Hey!</h1>", 200)
    resp.setAuthCookie ("user", "user");
    return resp;
}
