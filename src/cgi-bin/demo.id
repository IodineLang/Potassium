#!/usr/bin/iodine
use os;

use potassium.auth;
use View from potassium.views;
use potassium.response;
use potassium.request;
use potassium.router;
use potassium.settings;

CONNECTION_STRING = "Server=localhost;Database=test;Uid=root;Pwd=secret;";
URLBASE = "/cgi-bin/demo.id";

func main () {
    settings.Settings.init ();
    settings.Settings.set ("connectionString", CONNECTION_STRING);
    settings.Settings.set ("templateDir", "cgi-bin/templates");
    urls = List ();
    urls.add (router.URLItem ("/", IndexView ()));
    urls.add (router.URLItem ("/login", LoginView ()));
    urls.add (router.URLItem ("/logout", LogoutView ()));
    urls.add (router.URLItem ("/fnview", test))

    urlSpec = router.URLSpec (urls, "/");
    appRouter = router.Router (urlSpec, os.getEnv ("PATH_INFO"));
    appRouter.run ();
}

@views.functionView ("GET")
func test (req) {
    return response.HTMLResponse ("<h1>Die</h1>", 200);
}

class IndexView : View {
    func IndexView (self) {
        super ();
    }

    func get (self, requestData) {
        ctxt = HashMap ();
        ctxt ["logged_in"] = requestData.sessionValid ();
        return response.TemplateResponse ("cgi-bin/templates/index.html", ctxt);
    }
}

class LogoutView : View {
    func LogoutView (self) {
        super ();
    }

    func get (self, requestData) {
        uri = URLBASE + "/";
        resp = response.RedirectResponse (uri);
        try {
            auth.CookieAuth.logout (resp, requestData.user ["username"]);
        }
        except (e) {

        }
        return resp;
    }
}


class LoginView : View {
    func LoginView (self) {
        super ();
    }

    func get (self, requestData) {
        ctxt = HashMap ();
        ctxt ["error"] = false;
        return response.TemplateResponse ("cgi-bin/templates/login.html",
                                          ctxt);
    }

    func post (self, requestData) {
        uname = requestData.postData.getParam ("username");
        passwd = requestData.postData.getParam ("password");
        ctxt = HashMap ();

        if (uname == null || passwd == null) {
            ctxt ["error"] = true;
            ctxt ["errormessage"] = "Invalid form submission.";
            return response.TemplateResponse ("cgi-bin/templates/login.html",
                                              ctxt);
        }

        resp = response.RedirectResponse (URLBASE + "/login");
        if (auth.CookieAuth.login (resp, uname, passwd)) {
            resp.uri = URLBASE + "/";
        }
        return resp;
    }
}
